<style>
    /* Success message container */
    .alert-container {
        position: fixed;
        top: 10px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 100;
        padding: 10px;
        background-color: #28a745;
        /* Green for success */
        color: white;
        border-radius: 5px;
        display: none;
    }

    .alert-container .alert {
        margin: 0;
        font-size: 16px;
    }

    /* Flying effect */
    .flying {
        animation: flyToCart 1s ease-in-out forwards;
        position: absolute;
        z-index: 10;
    }

    @keyframes flyToCart {
        0% {
            transform: translate(0, 0);
            opacity: 1;
        }

        100% {
            transform: translate(350px, -100px);
            /* Final cart position */
            opacity: 0;
        }
    }

    /* Container for the product */
    .product-card {
        position: relative;
        overflow: hidden;
        cursor: pointer;
    }

    /* Style for the image */
    .product-card .card-img-top {
        transition: transform 0.4s ease, opacity 0.4s ease;
    }

    /* Details container (hidden by default) */
    .product-card .card-body {
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        background-color: rgba(0, 0, 0, 0.6);
        /* Semi-transparent background */
        color: white;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.4s ease, visibility 0.4s ease;
    }

    /* Hover effect */
    .product-card:hover .card-img-top {
        transform: rotate(15deg);
        /* Rotate image slightly on hover */
    }

    .product-card:hover .card-body {
        opacity: 1;
        visibility: visible;
    }

    .card-title,
    .card-text {
        margin: 5px 0;
    }
</style>

{{> giftLable}}
<main class="container mt-5">
    <h1 class="text-center mb-4">Our Products</h1>
    <div class="row">
        {{#each products}}
        <div class="col-md-4 mb-4" id="product-{{this._id}}">
            <a class="nav-link" href="#" data-bs-toggle="modal" data-bs-target="#loginModal">
                <div class="card h-100 d-flex flex-column">
                    <img src="{{this.imageUrl}}" class="card-img-top" alt="{{this.name}}">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">{{this.name}}</h5>
                        <p class="card-text">₹{{this.price}}.00</p>
                        {{#if this.discount}}
                        <p class="card-text text-danger">Discount: {{this.discount}}%</p>
                        {{/if}}
                    </div>
                </div>
            </a>
        </div>
        {{/each}}
    </div>
</main>

<script>
    document.addEventListener('DOMContentLoaded', function () {

        // Handle increase and decrease button clicks
        const decreaseButtons = document.querySelectorAll('.decrease-btn');
        const increaseButtons = document.querySelectorAll('.increase-btn');

        decreaseButtons.forEach(button => {
            button.addEventListener('click', function () {
                const productId = this.getAttribute('data-product-id');
                const quantityInput = document.getElementById('quantity-' + productId);
                let currentQuantity = parseInt(quantityInput.value);

                // Decrease quantity by 1, but prevent negative values
                if (currentQuantity > 0) {
                    quantityInput.value = currentQuantity - 1;
                }
            });
        });

        increaseButtons.forEach(button => {
            button.addEventListener('click', function () {
                const productId = this.getAttribute('data-product-id');
                const quantityInput = document.getElementById('quantity-' + productId);
                let currentQuantity = parseInt(quantityInput.value);
                quantityInput.value = currentQuantity + 1;
            });
        });

        const addToCartButtons = document.querySelectorAll('button[id^="addToCart-"]');

        addToCartButtons.forEach(button => {
            button.addEventListener('click', function () {
                const productId = this.id.split('-')[1]; // Extract product ID
                const productCard = document.querySelector(`#product-${productId}`); // Get the product card
                const productImage = productCard.querySelector('.card-img-top'); // Get product image
                const quantityInput = document.getElementById(`quantity-${productId}`); // Get quantity input
                const quantity = parseInt(quantityInput.value);

                if (quantity <= 0) {
                    showMessage('Please select a quantity greater than 0.', 'danger');
                    return;
                }

                // Create a clone of the product image for animation
                const productImageClone = productImage.cloneNode(true);

                // Set initial position of the cloned image
                document.body.appendChild(productImageClone); // Append clone to body
                const productImageRect = productImage.getBoundingClientRect();
                productImageClone.style.position = 'absolute';
                productImageClone.style.top = `${productImageRect.top + window.scrollY}px`;
                productImageClone.style.left = `${productImageRect.left + window.scrollX}px`;
                productImageClone.style.width = `${productImageRect.width}px`;
                productImageClone.style.height = `${productImageRect.height}px`;

                // Add flying class to start the animation
                productImageClone.classList.add('flying');

                // Handle adding to the cart logic here (e.g., sending the request to your server)
                axios.post(`cart/add`, {
                    productId: productId,
                    quantity: quantity,
                })
                    .then(response => {
                        // Show success message
                        axios.get(`/cart/count`, {
                            headers: {
                                'Authorization': `Bearer ${localStorage.setItem('token')}`
                            }
                        })
                            .then(response => {
                                const cartCount = document.getElementById('cartNumber');
                                if (response.data.items > 0) {
                                    cartCount.innerHTML = response.data.items;
                                    cartCount.style.backgroundColor = 'orange';
                                    cartCount.style.border = 'none';

                                } else {
                                    cartCount.innerHTML = '';  // Clear the cart count
                                    cartCount.style.backgroundColor = '#212529';
                                    cartCount.style.border = 'none';

                                }
                                quantityInput.value = 0; // Reset quantity input
                                showMessage(response.data.message, 'success');
                                productImageClone.remove(); // Remove the cloned image after the animation
                            })
                            .catch(error => {
                                console.error('Error fetching cart data:', error);
                            });
                        quantityInput.value = 0; // Reset quantity input
                        showMessage(response.data.message, 'success');
                        productImageClone.remove(); // Remove the cloned image after the animation
                    })
                    .catch(error => {
                        console.error('Error adding product to cart:', error);
                        showMessage('Failed to add product to cart.', 'danger');
                        productImageClone.remove(); // Remove the cloned image if error occurs
                    });
            });
        });

        // Function to show success or error messages
        function showMessage(message, type) {
            const messageContainer = document.getElementById('messageContainer');
            const messageContent = document.getElementById('messageContent');

            // Set message and style based on type
            messageContent.textContent = message;
            messageContainer.style.display = 'block';

            // Update the style for success or error
            if (type === 'success') {
                messageContainer.style.backgroundColor = '#28a745'; // Green for success
            } else {
                messageContainer.style.backgroundColor = '#dc3545'; // Red for error
            }

            // Hide the message after 3 seconds
            setTimeout(() => {
                messageContainer.style.display = 'none';
            }, 3000);
        }
    });


</script>

<div class="modal fade" id="loginModal" tabindex="-1" aria-labelledby="loginModalLabel" aria-hidden="true">
    <div class="loginModal modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="loginModalLabel">Login</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body d-flex flex-column flex-md-row">
                <!-- Left Side: Full Width Image on Small Screens and 50% on Larger Screens -->
                <div class="col-12 col-md-6 mb-4 mb-md-0 text-center">
                    <img src="image/dogGif.webp" class="img-fluid custom-img" alt="Dog Image">
                </div>

                <!-- Right Side: Login Form -->
                <div class="col-12 col-md-6">
                    <h2 class="text-center mb-4">Welcome Back!</h2>
                    <span id="errorForLogin"></span>
                    <form id="loginForm">
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="loginEmail" name="email" required>
                        </div>
                        <div class="mb-3 position-relative">
                            <label for="password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="loginPassword" name="password" required>
                            <span class="eye-icon position-absolute" style="right: 10px; top: 50%; cursor: pointer;"
                                onclick="togglePassword('loginPassword')">
                                👁️
                            </span>
                        </div>
                        <button type="submit" class="btn btn-primary w-100">Login</button>
                        <div id="formErrorForLogin" class="text-danger mt-2"></div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>